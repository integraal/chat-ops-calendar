// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calendar.proto

/*
Package calendar is a generated protocol buffer package.

It is generated from these files:
	calendar.proto

It has these top-level messages:
	EventRequest
	EventCollection
	Attendee
	Event
*/
package calendar

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type EventRequest struct {
	Start string `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventRequest) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *EventRequest) GetEnd() string {
	if m != nil {
		return m.End
	}
	return ""
}

func (m *EventRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type EventCollection struct {
	Items []*Event `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *EventCollection) Reset()                    { *m = EventCollection{} }
func (m *EventCollection) String() string            { return proto.CompactTextString(m) }
func (*EventCollection) ProtoMessage()               {}
func (*EventCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventCollection) GetItems() []*Event {
	if m != nil {
		return m.Items
	}
	return nil
}

type Attendee struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
}

func (m *Attendee) Reset()                    { *m = Attendee{} }
func (m *Attendee) String() string            { return proto.CompactTextString(m) }
func (*Attendee) ProtoMessage()               {}
func (*Attendee) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Attendee) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

type Event struct {
	Uid         string      `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Id          string      `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Start       int64       `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	End         int64       `protobuf:"varint,4,opt,name=end" json:"end,omitempty"`
	Summary     string      `protobuf:"bytes,5,opt,name=summary" json:"summary,omitempty"`
	Description string      `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	Attendees   []*Attendee `protobuf:"bytes,7,rep,name=attendees" json:"attendees,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Event) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Event) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Event) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Event) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Event) GetAttendees() []*Attendee {
	if m != nil {
		return m.Attendees
	}
	return nil
}

func init() {
	proto.RegisterType((*EventRequest)(nil), "calendar.EventRequest")
	proto.RegisterType((*EventCollection)(nil), "calendar.EventCollection")
	proto.RegisterType((*Attendee)(nil), "calendar.Attendee")
	proto.RegisterType((*Event)(nil), "calendar.Event")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Calendar service

type CalendarClient interface {
	// Sends a greeting
	GetEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventCollection, error)
}

type calendarClient struct {
	cc *grpc.ClientConn
}

func NewCalendarClient(cc *grpc.ClientConn) CalendarClient {
	return &calendarClient{cc}
}

func (c *calendarClient) GetEvents(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventCollection, error) {
	out := new(EventCollection)
	err := grpc.Invoke(ctx, "/calendar.Calendar/GetEvents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Calendar service

type CalendarServer interface {
	// Sends a greeting
	GetEvents(context.Context, *EventRequest) (*EventCollection, error)
}

func RegisterCalendarServer(s *grpc.Server, srv CalendarServer) {
	s.RegisterService(&_Calendar_serviceDesc, srv)
}

func _Calendar_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.Calendar/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarServer).GetEvents(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calendar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.Calendar",
	HandlerType: (*CalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEvents",
			Handler:    _Calendar_GetEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar.proto",
}

func init() { proto.RegisterFile("calendar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x4d, 0x62, 0xda, 0x64, 0x2a, 0xad, 0x2c, 0x22, 0xab, 0xa7, 0x10, 0x10, 0x7a, 0x2a,
	0x52, 0x2f, 0x1e, 0x95, 0x22, 0x5e, 0x7a, 0xca, 0x1b, 0xac, 0xd9, 0x39, 0x2c, 0xe4, 0x4f, 0xcd,
	0x4e, 0x04, 0x9f, 0xce, 0x57, 0x93, 0x9d, 0x24, 0xdd, 0x92, 0xdb, 0xce, 0xf7, 0xcd, 0xce, 0x7e,
	0xbf, 0x1d, 0x58, 0x97, 0xaa, 0xc2, 0x46, 0xab, 0x6e, 0x77, 0xea, 0x5a, 0x6a, 0x45, 0x32, 0xd5,
	0xf9, 0x11, 0x6e, 0x3e, 0x7e, 0xb0, 0xa1, 0x02, 0xbf, 0x7b, 0xb4, 0x24, 0xee, 0x20, 0xb6, 0xa4,
	0x3a, 0x92, 0x41, 0x16, 0x6c, 0xd3, 0x62, 0x28, 0xc4, 0x2d, 0x44, 0xd8, 0x68, 0x19, 0xb2, 0xe6,
	0x8e, 0xae, 0x0f, 0x6b, 0x65, 0x2a, 0x19, 0x0d, 0x7d, 0x5c, 0xe4, 0xaf, 0xb0, 0xe1, 0x69, 0x87,
	0xb6, 0xaa, 0xb0, 0x24, 0xd3, 0x36, 0xe2, 0x09, 0x62, 0x43, 0x58, 0x5b, 0x19, 0x64, 0xd1, 0x76,
	0xb5, 0xdf, 0xec, 0xce, 0x51, 0x86, 0x77, 0x07, 0x37, 0xcf, 0x20, 0x79, 0x27, 0xc2, 0x46, 0x23,
	0xfa, 0xd9, 0xc1, 0xe5, 0xec, 0xbf, 0x00, 0x62, 0xbe, 0xe2, 0xd2, 0xf4, 0x46, 0x8f, 0xae, 0x3b,
	0x8a, 0x35, 0x84, 0x66, 0x8a, 0x17, 0x1a, 0xed, 0x29, 0x5c, 0xba, 0x68, 0x46, 0x71, 0xcd, 0x1a,
	0x53, 0x48, 0x58, 0xda, 0xbe, 0xae, 0x55, 0xf7, 0x2b, 0x63, 0xbe, 0x3c, 0x95, 0x22, 0x83, 0x95,
	0x46, 0x5b, 0x76, 0xe6, 0xe4, 0x28, 0xe4, 0x82, 0xdd, 0x4b, 0x49, 0x3c, 0x43, 0xaa, 0xc6, 0xc4,
	0x56, 0x2e, 0x19, 0x4e, 0x78, 0xb8, 0x09, 0xa6, 0xf0, 0x4d, 0xfb, 0x23, 0x24, 0x87, 0xd1, 0x17,
	0x6f, 0x90, 0x7e, 0x22, 0x31, 0x8f, 0x15, 0xf7, 0xf3, 0x4f, 0x19, 0x96, 0xf1, 0xf8, 0x30, 0xd3,
	0xfd, 0xb7, 0xe6, 0x57, 0x5f, 0x0b, 0x5e, 0xe5, 0xcb, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2b,
	0xe5, 0xe0, 0xa0, 0xdc, 0x01, 0x00, 0x00,
}
